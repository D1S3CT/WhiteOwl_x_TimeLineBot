"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –º–∞—Å—Ç–µ—Ä–∞.
"""

import re
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from bot.keyboards.registration_keyboard import (
    get_registration_start_keyboard,
    get_terms_agreement_keyboard,
    get_back_to_terms_keyboard
)
from bot.keyboards.main_menu_keyboard import get_main_menu_keyboard
from bot.texts.registrations_texts import (
    get_registration_benefits_text,
    get_terms_text,
    get_full_name_input_text
)


async def show_registration_benefits(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞–º–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –º–∞—Å—Ç–µ—Ä–∞."""
    keyboard = get_registration_start_keyboard()
    text = get_registration_benefits_text()

    if update.callback_query:
        await update.callback_query.message.edit_text(text, reply_markup=keyboard)
        await update.callback_query.answer()
    else:
        await update.message.reply_text(text, reply_markup=keyboard)


async def start_master_registration_process(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –º–∞—Å—Ç–µ—Ä–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è."""
    keyboard = get_terms_agreement_keyboard()
    text = get_terms_text()

    await update.callback_query.message.edit_text(
        text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await update.callback_query.answer()


async def handle_terms_acceptance(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–≥–ª–∞—Å–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É—Å–ª–æ–≤–∏—è–º–∏."""
    keyboard = get_back_to_terms_keyboard()
    text = get_full_name_input_text()

    context.user_data['registration_step'] = 'full_name_input'

    await update.callback_query.message.edit_text(
        text,
        reply_markup=keyboard
    )
    await update.callback_query.answer()


async def handle_full_name_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –§–ò–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if context.user_data.get('registration_step') != 'full_name_input':
        return

    full_name = update.message.text.strip()

    if not validate_full_name(full_name):
        await update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –§–∞–º–∏–ª–∏—é –∏ –ò–º—è (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ—Ñ–∏—Å—ã, –º–∏–Ω–∏–º—É–º 2 —Å–ª–æ–≤–∞):"
        )
        return

    context.user_data['temp_master_data'] = {
        'full_name': full_name
    }

    keyboard = [[InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="back_to_full_name_input")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        f"‚úÖ –û—Ç–ª–∏—á–Ω–æ, {full_name}!\n\n"
        "–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n"
        "–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!",
        reply_markup=reply_markup
    )

    context.user_data['registration_step'] = None


def validate_full_name(full_name: str) -> bool:
    """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –§–ò–û."""
    if not full_name or len(full_name.strip()) < 3:
        return False

    words = full_name.split()
    if len(words) < 2:
        return False

    pattern = r'^[–∞-—è–ê-–Ø—ë–Åa-zA-Z\s\-]+$'
    if not re.match(pattern, full_name):
        return False

    for word in words:
        if len(word.strip()) < 2:
            return False

    return True


async def handle_terms_decline(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–∫–∞–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç —É—Å–ª–æ–≤–∏–π."""
    keyboard = get_main_menu_keyboard()

    await update.callback_query.message.edit_text(
        "üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TimeLineBot! üåü\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –Ω–∞–π—Ç–∏ –ª—É—á—à–µ–≥–æ –º–∞—Å—Ç–µ—Ä–∞ –∏–ª–∏ —Å—Ç–∞—Ç—å –º–∞—Å—Ç–µ—Ä–æ–º —Å–∞–º–æ–º—É!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ üëá",
        reply_markup=keyboard
    )
    await update.callback_query.answer()


async def return_to_main_menu_from_registration(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."""
    if 'registration_step' in context.user_data:
        del context.user_data['registration_step']
    if 'temp_master_data' in context.user_data:
        del context.user_data['temp_master_data']

    keyboard = get_main_menu_keyboard()

    await update.callback_query.message.edit_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
        reply_markup=keyboard
    )
    await update.callback_query.answer()


async def return_to_terms_from_registration(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —É—Å–ª–æ–≤–∏—è–º –∏–∑ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."""
    if 'registration_step' in context.user_data:
        del context.user_data['registration_step']

    keyboard = get_terms_agreement_keyboard()
    text = get_terms_text()

    await update.callback_query.message.edit_text(
        text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await update.callback_query.answer()